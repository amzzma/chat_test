代码成果目标：1.本地推理VITS模型，2.连接chatGPT接口并将对话框部署到本地terminal，3.将对话内容实现于renpy，并添加上人物对话动态。

代码基本逻辑：1.加载VITS模型。2.接入chatGPT。3.通过文件MD5判断是否写入对话文本，同时将文本发送到chatGPT。4.接受回复并写入对应文本再将内容输出到UI界面对话框。

说明：代码不复杂，可根据所需来修改。关于audio文件夹：
1. output是输出音频，.ogg是renpy支持的格式，.wav是VITS推理生成的。
2. words.txt 和 output.txt 分别是在renpy的输入文本和chatgpt生成的回复文本。
3. start_time.txt 和 start_time_B.txt 分别是py程序顺利运行的“锁”和renpy端接收到音频生成完毕并让程序继续的“锁”。

吐槽：加载VITS模型与接入chatGPT都几乎是搬运来的，连接renpy的灵感从别人那看到的（虽然我之前接触过renpy，但知识都忘得差不多的），你会发现代码可以用“屎盆镶金边”来形容。
chatGPT的接口越来越不稳定（不知道是不是我非正常访问太多被拉黑了）

顺序线：
1.粗糙版写好了，但使用时还不够方需要经常观察py控制台。
2.更新：不需要观察控制台，采用多线程在renpy游戏界面可以知道语句推理完毕。但添加了一些其他判断程序进程的文件且在退出时还需手动修改才能保证下次正常运行，且不能输入同样的句子否则要手调才能正常运行。能力所限，在不用flask框架的情况下只能想到这种傻办法了。
3.测试：通过了其他VITS模型（如绫地宁宁的365epochs.pth），说明借鉴来的代码的兼容性可接受。
4.更新：添加多种人物状态，由两种方案，一种是使用live2d，一种是直接插入人物图片。
4.1.先入手live2d，正好试试没接触过的新玩意,让制片人动起来……想想就很快乐。
4.1.1 在对话界面添加上了live2d的人物动作，难度不大，但不足的是无法根据回答内容来所处对应的表情，这其实也是我在采用静态CG时遇到的问题。个人认为者就牵扯到了NLP有关的问题了，之后再看看哪些网络上的成果能较简洁的使用（比如再用个接口）。

5.停止更新，认识到自己的不足，打算更进一步学习。

欢迎交流，qq：2484696780